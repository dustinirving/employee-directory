{"version":3,"sources":["components/Dropdown/index.js","components/Search/index.js","components/SearchWrapper/index.js","components/Employee/index.js","components/Table/index.js","components/Container/index.js","components/Header/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","className","type","id","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","orderHandler","Search","name","placeholder","onChange","handleInputChange","SearchWrapper","employees","filterHandler","Employee","first","last","department","position","scope","Table","map","employee","key","Container","useState","employeeList","setEmployees","search","setSearch","useEffect","filteredEmployees","filter","Object","values","toString","includes","orderBy","sortedEmployees","sort","a","b","event","target","value","Header","style","fontWeight","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77af2aca.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Dropdown (props) {\n  return (\n    <div className='dropdown'>\n      <button\n        className='btn bg-info btn-secondary dropdown-toggle border-info'\n        type='button'\n        id='dropdownMenuButton'\n        data-toggle='dropdown'\n        aria-haspopup='true'\n        aria-expanded='false'\n      >\n        Order By\n      </button>\n      <div className='dropdown-menu' aria-labelledby='dropdownMenuButton'>\n        <button\n          className='dropdown-item'\n          onClick={() => props.orderHandler('id')}\n        >\n          ID\n        </button>\n        <button\n          className='dropdown-item'\n          onClick={() => props.orderHandler('first')}\n        >\n          First Name\n        </button>\n        <button\n          className='dropdown-item'\n          onClick={() => props.orderHandler('last')}\n        >\n          Last Name\n        </button>\n        <button\n          className='dropdown-item'\n          onClick={() => props.orderHandler('department')}\n        >\n          Department\n        </button>\n        <button\n          className='dropdown-item'\n          onClick={() => props.orderHandler('position')}\n        >\n          Position\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Dropdown\n","import React from 'react'\n\nfunction Search (props) {\n  return (\n    <div>\n      <input\n        name='search'\n        type='text'\n        placeholder='Search...'\n        onChange={props.handleInputChange}\n      />\n    </div>\n  )\n}\n\nexport default Search\n","import React from 'react'\nimport Dropdown from '../Dropdown'\nimport Search from '../Search'\n\nfunction SearchWrapper (props) {\n  return (\n    <div className='row mb-3'>\n      <div className='col-6'>\n        <Dropdown\n          employees={props.employees}\n          orderHandler={props.orderHandler}\n        />\n      </div>\n      <div className='col-6 text-right'>\n        <Search\n          employees={props.employees}\n          filterHandler={props.filterHandler}\n          handleInputChange={props.handleInputChange}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SearchWrapper\n","import React from 'react'\n\nfunction Employee (props) {\n  const { id, first, last, department, position } = props\n  return (\n    <tr>\n      <th scope='row'>{id}</th>\n      <td>{first}</td>\n      <td>{last}</td>\n      <td>{department}</td>\n      <td>{position}</td>\n    </tr>\n  )\n}\n\nexport default Employee\n","import React from 'react'\nimport Employee from '../Employee'\n\nfunction Table (props) {\n  return (\n    <table className='table'>\n      <thead>\n        <tr>\n          <th scope='col'>ID #</th>\n          <th scope='col'>First</th>\n          <th scope='col'>Last</th>\n          <th scope='col'>Department</th>\n          <th scope='col'>Position</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.employees.map(employee => (\n          <Employee\n            id={employee.id}\n            key={employee.id}\n            first={employee.first}\n            last={employee.last}\n            department={employee.department}\n            position={employee.position}\n          />\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react'\nimport employeeList from '../../employees.json'\nimport SearchWrapper from '../SearchWrapper'\nimport Table from '../Table'\n\nfunction Container () {\n  const [employees, setEmployees] = useState(employeeList)\n\n  const [search, setSearch] = useState('')\n\n  useEffect(() => {\n    filterHandler(search)\n  }, [search])\n\n  const orderHandler = orderBy => {\n    const sortedEmployees = employees.sort((a, b) =>\n      a[orderBy] > b[orderBy] ? 1 : -1\n    )\n    setEmployees([...sortedEmployees])\n  }\n\n  const filterHandler = search => {\n    const filteredEmployees = employees.filter(employee => {\n      const values = Object.values(employee)\n      for (let value of values) {\n        const stringValue = value.toString()\n        if (stringValue.includes(search)) {\n          return employee\n        }\n      }\n    })\n    setEmployees(filteredEmployees)\n  }\n\n  const handleInputChange = event => {\n    setEmployees(employeeList)\n    setSearch(event.target.value)\n  }\n\n  return (\n    <div className='container'>\n      <SearchWrapper\n        employees={employees}\n        orderHandler={orderHandler}\n        filterHandler={filterHandler}\n        handleInputChange={handleInputChange}\n      />\n      <Table employees={employees} />\n    </div>\n  )\n}\n\nexport default Container\n","import React from 'react'\n\nfunction Header () {\n  return (\n    <div className='jumbotron text-center bg-info text-white'>\n      <h1 style={{ fontWeight: 'bold' }}>Employee Directory</h1>\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Container from '../components/Container'\nimport Header from '../components/Header'\n\nfunction Home () {\n  return (\n    <>\n      <Header />\n      <Container />\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport './App.css'\nimport Home from './pages/Home'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}